{"name":"APEX IR XLSX Downloader","tagline":"Download APEX Interactive Report to XLSX file","body":"APEXIR_XLSX\r\n===========\r\n\r\nDownload APEX Interactive Reports as XLSX files.\r\n\r\nINSTALLATION\r\n------------\r\nNavigate to folder \"setup\".\r\nSimply run the script \"install_all.sql\" if you want everything installed at once. \r\nIf you have the referenced libraries already you can run \"install_main.sql\" to install the main package. \r\nLibraries can be installed standalone by using \"install_libs.sql\".\r\n\r\nYou can also manually create the packages by running the separate package specifications and bodies in your favourite IDE.\r\n\r\nHOW TO USE\r\n----------\r\n###Enable download for a single interactive report\r\n\r\n1. Create the interactive report region. (skip if you already have one)\r\n2. Run the page and inspect the source code using your browser.\r\n3. Mark down the value of the hidden item with id \"apexir_REGION_ID\" removing the \"R\" at the beginning.  \r\n   The numeric value you now have is the only mandatory input to the main function.\r\n4. Create button or similar element to reload page setting request to \"XLSX\".\r\n5. Create page process (sample)  \r\n   Type: PL/SQL anonymous block  \r\n   Process Point: On Load - Before Header \r\n   Condition Type: Request = Expression 1  \r\n   Expression 1: XLSX  \r\n   Process (replace $APEXIR_REGION_ID$ with number from step above):\r\n```sql\r\n   DECLARE\r\n     l_xlsx apexir_xlsx_types_pkg.t_returnvalue;\r\n   BEGIN\r\n     l_xlsx := apexir_xlsx_pkg.apexir2sheet( p_ir_region_id => $APEXIR_REGION_ID$);\r\n     OWA_UTIL.mime_header (l_xlsx.mime_type, FALSE);\r\n     HTP.p ('Content-length: ' || l_xlsx.file_size);\r\n     HTP.p ('Content-Disposition: attachment; filename=\"' || l_xlsx.file_name || '\"');\r\n     OWA_UTIL.http_header_close;\r\n     WPG_DOCLOAD.download_file (l_xlsx.file_content);\r\n   END;\r\n``` \r\n\r\n###Enable download for all interactive reports in application  \r\n1. Create an application item to hold the requestes interactive report id. \r\n   We'll assume the item is called APEXIR_REGION_ID in the following.\r\n2. Create button on page with interactive report.  \r\n   Set Action to \"Defined by Dynamic Action\"  \r\n3. Create dynamic action.  \r\n   Event: Click  \r\n   Selection Type: Button  \r\n   Button: The button you just created.  \r\n   Condition: Leave as default of \"- No Condition -\"  \r\n   Create one True Action of Type Execute JavaScript Code with following code:  \r\n```\r\n   redirect('f?p=&APP_ID.:&APP_PAGE_ID.:&SESSION.:XLSX:&DEBUG.::APEXIR_REGION_ID:' + apex.jQuery('#apexir_REGION_ID').val().substr(1));\r\n```\r\n   This will reload the page setting request to \"XLSX\" and APEXIR_REGION_ID application item to the respective region id.  \r\n4. Create Application Process  \r\n   Type: PL/SQL anonymous block  \r\n   Process Point: On Load - Before Header  \r\n   Condition Type: Request = Expression 1  \r\n   Expression 1: XLSX  \r\n   Process:  \r\n```sql\r\n   DECLARE\r\n     l_xlsx apexir_xlsx_types_pkg.t_returnvalue;\r\n   BEGIN\r\n     l_xlsx := apexir_xlsx_pkg.apexir2sheet( p_ir_region_id => :APEXIR_REGION_ID);\r\n     OWA_UTIL.mime_header (l_xlsx.mime_type, FALSE);\r\n     HTP.p ('Content-length: ' || l_xlsx.file_size);\r\n     HTP.p ('Content-Disposition: attachment; filename=\"' || l_xlsx.file_name || '\"');\r\n     OWA_UTIL.http_header_close;\r\n     WPG_DOCLOAD.download_file (l_xlsx.file_content);\r\n   END;\r\n``` \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}