{"name":"APEX IR XLSX Downloader","tagline":"Download APEX Interactive Report to XLSX file","body":"APEXIR_XLSX\r\n===========\r\n\r\nDownload APEX Interactive Reports as XLSX files.  \r\nWith this package you can download any Interactive report using the standard Excel file format.  \r\nMain benefits are that all data types are preserved and stored in a way that Excel recognizes them properly.\r\n\r\nSUPPORTED FUNCTIONALITY\r\n-----------------------\r\n*  Filtering and Sorting\r\n*  Control Breaks\r\n*  Computations\r\n*  Aggregations (with a small limitation, see below)\r\n*  Highlights\r\n*  VARCHAR2 columns\r\n*  DATE columns including formatting (supports &APP_DATE_TIME_FORMAT. substitution)\r\n*  NUMBER columns including formatting\r\n*  CLOBs (limited to 32767 characters)\r\n*  \"Group By\" view mode (for limitations see below)\r\n*  Display column help text as comment on respective column header.\r\n\r\nCURRENT LIMITATIONS\r\n-------------------\r\n1. CLOB columns are supported but converted to VARCHAR2(32767) before inserted into the spreadsheet.  \r\n   Support for full size CLOBs is planned for a future release.\r\n2. TIMESTAMP columns are treated like DATE columns.  \r\n   Full support for TIMESTAMP is planned for a future release.\r\n2. Aggregates defined on the first column of any report are ignored.  \r\n   The cell is needed to display the aggregation type.  \r\n   Currently there are no immediate plans to lift that restriction.\r\n3. For the \"Group By\" view report to work all used columns also need to be present in the \"Standard\" report view.  \r\n   The APEX engine only exposes the SQL query of the standard view currently.  \r\n4. The download only works for authenticated users.  \r\n   The APEX engine does not give back base_report_id if user isn't authenticated.  \r\n   Research is currently ongoing to lift this restriction.\r\n   \r\nINSTALLATION\r\n------------\r\nNavigate to folder \"setup\".\r\nSimply run the script \"install_all.sql\" if you want everything installed at once.  \r\nIf you have the referenced libraries already you can run \"install_main.sql\" to install the main package.  \r\nLibraries can be installed standalone by using \"install_libs.sql\".\r\n\r\nYou can also manually create the packages by running the separate package specifications and bodies in your favourite IDE.\r\n\r\nHOW TO USE\r\n----------\r\n###Enable download for a single interactive report\r\n\r\n1. Create the interactive report region. (skip if you already have one)\r\n2. Run the page and inspect the source code using your browser.\r\n3. Mark down the value of the hidden item with id \"apexir_REGION_ID\" removing the \"R\" at the beginning.  \r\n   The numeric value you now have is the only mandatory input to the main function.\r\n4. Create button or similar element to reload page setting request to \"XLSX\".\r\n5. Create page process (sample)  \r\n   Type: PL/SQL anonymous block  \r\n   Process Point: On Load - Before Header \r\n   Condition Type: Request = Expression 1  \r\n   Expression 1: XLSX  \r\n   Process (replace $APEXIR_REGION_ID$ with number from step above):  \r\n```sql\r\n   apexir_xlsx_pkg.download( p_ir_region_id => $APEXIR_REGION_ID$);\r\n``` \r\n\r\n###Enable download for all interactive reports in application  \r\n1. Create an application item to hold the requested interactive report id. \r\n   We'll assume the item is called APEXIR_REGION_ID in the following.\r\n2. Create Application Computation  \r\n   Computation Item: APEXIR_REGION_ID  \r\n   Computation Point: Before Header  \r\n   Computation Type: SQL Query (return single value)  \r\n   Condition Type: Request != Expression 1  \r\n   Expression 1: XLSX  \r\n   Computation (if you have only one IR on the page):\r\n\r\n    ```sql\r\n    SELECT region_id\r\n      FROM apex_application_page_ir\r\n     WHERE application_id = :APP_ID\r\n       AND page_id = :APP_PAGE_ID\r\n    ```  \r\n\r\n3. Create Application Process  \r\n   Type: PL/SQL anonymous block  \r\n   Process Point: On Load - Before Header  \r\n   Condition Type: Request = Expression 1  \r\n   Expression 1: XLSX  \r\n   Process:\r\n\r\n    ```sql\r\n    apexir_xlsx_pkg.download( p_ir_region_id => :APEXIR_REGION_ID);\r\n    ```\r\n\r\n4. Create button on page with interactive report.  \r\n   Action: Redirect to Page in this Application  \r\n   Page: The page you are on.  \r\n   Request: XLSX  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}